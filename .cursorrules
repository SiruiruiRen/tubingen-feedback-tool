# TÃ¼bingen Teacher Feedback Tool - Cursor Rules

## Project Overview
This is a Teacher Professional Vision Feedback tool that generates AI-powered feedback on teaching reflections. The system analyzes reflections across three dimensions: Description, Explanation, and Prediction.

## Architecture & Deployment

### Services Architecture
- **Frontend**: Static HTML/CSS/JS served by Render
- **Backend**: Node.js CORS proxy for OpenAI API calls
- **Database**: Supabase (PostgreSQL)
- **AI**: OpenAI GPT-4 API
- **Deployment**: Render with auto-deploy from GitHub main branch

### Key URLs
- **Production Frontend**: https://tubingen-feedback-cors-proxy.onrender.com/
- **Backend API**: https://tubingen-feedback-cors-proxy.onrender.com/api/openai/v1/chat/completions
- **GitHub Repository**: https://github.com/SiruiruiRen/tubingen-feedback-tool
- **Supabase Dashboard**: https://immrkllzjvhdnzesmaat.supabase.co

## Deployment Workflow

### Standard Deployment Process
1. **Make Changes**: Edit files in local `/Users/sirui/Desktop/tubigen/` directory
2. **Test Locally**: Use `npm start` to run local development server (if needed)
3. **Stage Changes**: `git add <files>` or `git add .`
4. **Commit Changes**: `git commit -m "Descriptive commit message"`
5. **Push to Main**: `git push origin clean-branch:main`
6. **Auto-Deploy**: Render automatically deploys from main branch
7. **Verify**: Check https://tubingen-feedback-cors-proxy.onrender.com/ for changes

### Force Deployment (if auto-deploy fails)
```bash
git commit --allow-empty -m "Force deployment - trigger Render auto-deploy"
git push origin clean-branch:main
```

### Local Development Issues
- **Port 3000 conflicts**: Kill existing processes with `ps aux | grep node` then `kill <PID>`
- **Nodemon loops**: Stop with Ctrl+C, clear port conflicts before restarting

## File Structure & Key Files

### Core Application Files
- `index.html` - Main UI structure with Bootstrap 5
- `app.js` - Core JavaScript functionality (1156 lines)
- `styles.css` - Custom styling and layout
- `cors-proxy.js` - Node.js backend for API proxying

### Configuration Files
- `render.yaml` - Render deployment configuration
- `package.json` - Node.js dependencies and scripts
- `supabase-update.sql` - Database schema updates
- `.cursorrules` - This file (development guidelines)

### Documentation
- `README.md` - Project documentation
- `DATABASE_UPDATE_INSTRUCTIONS.md` - Manual database update guide
- `update-database.html` - Automated database update tool

## Development Guidelines

### Code Organization
- **Language Support**: Full English/German translation system
- **Feedback Types**: Extended (academic) and Short (user-friendly) versions
- **UI Framework**: Bootstrap 5 with custom CSS
- **State Management**: Session storage for user data persistence

### Key Features Implementation
- **Dual Feedback System**: Both Extended and Short feedback generated simultaneously
- **Analysis Distribution**: Percentage breakdown of Description/Explanation/Prediction
- **Tab Tracking**: User interaction tracking for research purposes
- **UMUX-Lite Rating**: 2-item usability scale for system evaluation
- **Video Selection**: Required dropdown for Videos 1-8
- **Revision Tracking**: Monitors when users revise reflections

### Database Schema (Supabase)
```sql
-- Key columns in reflections table:
- id (primary key)
- student_name (text)
- video_id (text)
- reflection_text (text)
- feedback_text (text) -- Extended version
- feedback_text_short (text) -- Short version
- analysis_percentages (jsonb) -- Distribution analysis
- language (text) -- 'en' or 'de'
- capabilities_rating (integer) -- UMUX-Lite rating 1-5
- ease_rating (integer) -- UMUX-Lite rating 1-5
- umux_score (numeric) -- Calculated UMUX score
- interaction_data (jsonb) -- Tab switches, time tracking
- session_id (text)
- created_at (timestamp)
- rated_at (timestamp)
```

## Styling & UI Guidelines

### Color Scheme
- **Primary**: #3f51b5 (Indigo)
- **Description**: #00acc1 (Cyan)
- **Explanation**: #7b1fa2 (Purple)
- **Prediction**: #388e3c (Green)
- **Keywords**: #000000 (Black, bold)

### Layout Specifications
- **Container Width**: 1600px
- **Column Distribution**: Settings 18%, Input 32%, Feedback 50%
- **Textarea Height**: 400px minimum
- **Feedback Area**: 200px minimum height

### Component Styling
- **Tabs**: Enhanced visibility with borders, shadows, hover effects
- **Keywords**: Bold black text for Strength, Good, Suggestions, Tip, Why
- **Distribution**: Compact single-line display with minimal spacing
- **Definitions**: Collapsible yellow/gold themed section

## API Integration

### OpenAI Configuration
- **Model**: gpt-4o
- **Temperature**: 0.7 for feedback, 0.3 for analysis
- **Max Tokens**: 2000 for feedback, 100 for analysis
- **Language Verification**: Automatic detection and warning for wrong language responses

### Prompt Engineering
- **Academic Style**: Detailed, research-grounded feedback with educational theory
- **User-Friendly Style**: Concise, simple language for student teachers
- **Analysis Prompts**: JSON-only responses for percentage distribution
- **Focus Areas**: Emphasize improvement in areas with low percentages

## Error Handling & Troubleshooting

### Common Issues
1. **Database Schema Errors**: Use DATABASE_UPDATE_INSTRUCTIONS.md or update-database.html
2. **Deployment Not Updating**: Force deployment with empty commits
3. **Port Conflicts**: Kill existing Node processes before starting
4. **API Failures**: Check OPENAI_API_KEY in Render environment variables

### Debugging Tools
- **Browser Console**: Check for JavaScript errors
- **Network Tab**: Monitor API calls and responses
- **Render Logs**: Check deployment status and runtime errors
- **Supabase Logs**: Monitor database operations

## Security & Environment

### Environment Variables (Render)
- `OPENAI_API_KEY`: Set in Render dashboard (sync: false)
- `NODE_VERSION`: 18.x
- Supabase credentials: Hardcoded in frontend (public keys only)

### Security Considerations
- API keys never committed to repository
- CORS proxy prevents direct API exposure
- Supabase RLS policies for data protection
- Input validation for all user inputs

## Testing & Quality Assurance

### Pre-Deployment Checklist
- [ ] Test both English and German interfaces
- [ ] Verify Extended and Short feedback generation
- [ ] Check tooltip functionality
- [ ] Test video selection requirement
- [ ] Validate rating system
- [ ] Confirm revision warning system
- [ ] Test definitions expansion tracking

### Performance Monitoring
- Track feedback generation time
- Monitor API response rates
- Check database query performance
- Validate user interaction tracking

## Future Development Notes

### Planned Enhancements
- Additional video options beyond 1-8
- Enhanced analytics dashboard
- Improved feedback personalization
- Multi-language support expansion

### Technical Debt
- Consider migrating to TypeScript
- Implement proper state management (Redux/Zustand)
- Add comprehensive test suite
- Optimize bundle size and loading performance

## Emergency Procedures

### Rollback Process
1. Identify last working commit: `git log --oneline`
2. Revert to working state: `git revert <commit-hash>`
3. Push revert: `git push origin clean-branch:main`
4. Monitor deployment in Render dashboard

### Database Recovery
1. Check Supabase dashboard for backup options
2. Use DATABASE_UPDATE_INSTRUCTIONS.md for schema fixes
3. Contact Supabase support for critical issues

---

**Last Updated**: May 2025
**Maintainer**: Development Team
**Contact**: Check GitHub repository for current maintainers 